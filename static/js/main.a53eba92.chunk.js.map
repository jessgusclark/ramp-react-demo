{"version":3,"sources":["lib/rdoc.ts","App.tsx","lib/provider.ts","lib/ramp.ts","reportWebVitals.ts","index.tsx"],"names":["provider","ethers","providers","JsonRpcProvider","rDocContract","Contract","constant","inputs","name","type","outputs","payable","stateMutability","getRDocBalance","address","balanceOf","toLowerCase","then","response","balanceToString","balance","numberOfDecimals","pot","BigNumber","from","pow","parts","integerPart","div","toString","decimalPart","mod","padStart","Number","slice","rLogin","RLogin","rpcUrls","31","supportedChains","App","useState","setProvider","setAddress","rDocBalance","setRDocBalance","className","onClick","connect","request","method","addresses","toChecksumAddress","getProviderAddress","addr","catch","console","log","href","target","rel","RampInstantSDK","url","swapAsset","userAddress","hostAppName","hostLogoUrl","on","event","show","buyDoc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAwBMA,EAAW,IAAIC,IAAOC,UAAUC,gBAAgB,sCAEhDC,EAAe,IAAIH,IAAOI,SADZ,6CAvBI,CACtB,CACEC,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,SACNC,KAAM,YAGVD,KAAM,YACNE,QAAS,CACP,CACEF,KAAM,UACNC,KAAM,YAGVE,SAAS,EACTC,gBAAiB,OACjBH,KAAM,aAM6DT,GAE1Da,EAAiB,SAACC,GAAD,OAC5BV,EAAaW,UAAUD,EAAQE,eAC5BC,MAAK,SAACC,GAAD,OAAyBC,EAAgBD,EAAU,QAGvDC,EAAkB,SACtBC,EACAC,GAEA,IAAMC,EAAMC,IAAUC,KAAK,MAAMC,IAAIJ,GAC/BK,EAAQ,CACZC,YAAaJ,IAAUC,KAAKJ,GAASQ,IAAIN,GAAKO,WAC9CC,YAAaP,IAAUC,KAAKJ,GACzBW,IAAIT,GACJO,WACAG,SAASC,OAAOZ,EAAiBQ,YAAa,KAC9CK,MAAM,EAAG,IAGd,MAAM,GAAN,OAAUR,EAAMC,YAAhB,YAA+BD,EAAMI,cCxCjCK,EAAS,IAAIC,IAAO,CACxBC,QAAS,CACPC,GAAI,sCAENC,gBAAiB,CAAC,MA6DLC,MA1Df,WAAiB,IAAD,EACkBC,mBAAS,MAD3B,mBACPzC,EADO,KACG0C,EADH,OAEgBD,mBAAiB,IAFjC,mBAEP3B,EAFO,KAEE6B,EAFF,OAGwBF,mBAAiB,WAHzC,mBAGPG,EAHO,KAGMC,EAHN,KAsBd,OACE,sBAAKC,UAAU,MAAf,UACE,6CAEE9C,GAAY,wBAAQ+C,QArBF,WACtBZ,EAAOa,UACJ/B,MAAK,YAAmB,IAAhBjB,EAAe,EAAfA,SACP0C,EAAY1C,GCpBc,SAACA,GAAD,OAChCA,EAASiD,QAAQ,CAAEC,OAAQ,iBACxBjC,MAAK,SAACkC,GAAD,OAAyBC,4BAAkBD,EAAU,GAAI,ODmB3DE,CAAmBrD,GAAUiB,MAAK,SAACqC,GACjCX,EAAWW,GACXzC,EAAeyC,GAAMrC,KAAK4B,SAG7BU,MAAMC,QAAQC,MAYD,sBAEbzD,GACC,gCACE,gCACE,kCACE,+BACE,yCACA,6BACE,mBAAG0D,KAAI,kDAA6C5C,GAAW6C,OAAO,SAASC,IAAI,aAAnF,SACG9C,SAIP,+BACE,8CACA,6BAAK8B,IACL,6BACE,wBAAQG,QA3BD,WACrBF,EAAe,WACfhC,EAAeC,GAASG,KAAK4B,IAyBf,+BAOR,wBAAQE,QAAS,kBE/DL,SAACjC,GACR,IAAI+C,IAAe,CAG9BC,IAAK,qCAGLC,UAAW,WAEXC,YAAalD,EAGbmD,YAAa,WACbC,YAAa,4DAGVC,GAAG,KAAK,SAAAC,GAAK,OAAIZ,QAAQC,IAAIW,MAAQC,OF+CXC,CAAOxD,IAA9B,8BGnDKyD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a53eba92.chunk.js","sourcesContent":["import { ethers, BigNumber } from 'ethers'\n\nconst erc20AbiPartial = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\n\nconst provider = new ethers.providers.JsonRpcProvider('https://public-node.testnet.rsk.co')\nconst rDocAddress = '0xc3de9f38581f83e281f260d0ddbaac0e102ff9f8'\nconst rDocContract = new ethers.Contract(rDocAddress, erc20AbiPartial, provider)\n\nexport const getRDocBalance = (address: string): Promise<string> =>\n  rDocContract.balanceOf(address.toLowerCase())\n    .then((response: BigNumber) => balanceToString(response, 18))\n\n// borrowed from the SmartWallet:\nconst balanceToString = (\n  balance: BigNumber,\n  numberOfDecimals: number\n) => {\n  const pot = BigNumber.from('10').pow(numberOfDecimals)\n  const parts = {\n    integerPart: BigNumber.from(balance).div(pot).toString(),\n    decimalPart: BigNumber.from(balance)\n      .mod(pot)\n      .toString()\n      .padStart(Number(numberOfDecimals.toString()), '0')\n      .slice(0, 8)\n  }\n\n  return `${parts.integerPart}.${parts.decimalPart}`\n}\n","import RLogin from '@rsksmart/rlogin'\nimport React, { useState } from 'react'\nimport './App.scss'\nimport { getProviderAddress } from './lib/provider'\nimport { buyDoc } from './lib/ramp'\nimport { getRDocBalance } from './lib/rdoc'\n\nconst rLogin = new RLogin({\n  rpcUrls: {\n    31: 'https://public-node.testnet.rsk.co'\n  },\n  supportedChains: [31]\n})\n\nfunction App () {\n  const [provider, setProvider] = useState(null)\n  const [address, setAddress] = useState<string>('')\n  const [rDocBalance, setRDocBalance] = useState<string>('LOADING')\n\n  const connectToWallet = () => {\n    rLogin.connect()\n      .then(({ provider }) => {\n        setProvider(provider)\n        getProviderAddress(provider).then((addr: string) => {\n          setAddress(addr)\n          getRDocBalance(addr).then(setRDocBalance)\n        })\n      })\n      .catch(console.log)\n  }\n\n  const refreshBalance = () => {\n    setRDocBalance('LOADING')\n    getRDocBalance(address).then(setRDocBalance)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Ramp Demo!</h1>\n\n      {!provider && <button onClick={connectToWallet}>Connect!</button>}\n\n      {provider && (\n        <div>\n          <table>\n            <tbody>\n              <tr>\n                <th>Address</th>\n                <td>\n                  <a href={`https://explorer.testnet.rsk.co/address/${address}`} target=\"_blank\" rel=\"noreferrer\">\n                    {address}\n                  </a>\n                </td>\n              </tr>\n              <tr>\n                <th>rDoc Balance</th>\n                <td>{rDocBalance}</td>\n                <td>\n                  <button onClick={refreshBalance}>\n                    refresh\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <button onClick={() => buyDoc(address)}>Buy RDOC!</button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import { toChecksumAddress } from '@rsksmart/rsk-utils'\n\nexport const getProviderAddress = (provider: any): Promise<string> =>\n  provider.request({ method: 'eth_accounts' })\n    .then((addresses: string[]) => toChecksumAddress(addresses[0], 31))\n","import { RampInstantSDK } from '@ramp-network/ramp-instant-sdk'\n\nexport const buyDoc = (address: string) => {\n  const ramp = new RampInstantSDK({\n    // for testnet:\n    // url: 'https://ri-widget-staging.firebaseapp.com/',\n    url: 'https://ri-widget-staging.web.app/',\n\n    // for IOV:\n    swapAsset: 'RSK_RDOC',\n    // userAddress must be lowercase or checksummed correctly:\n    userAddress: address,\n\n    // for the dapp:\n    hostAppName: 'Ramp POC',\n    hostLogoUrl: 'https://rampnetwork.github.io/assets/misc/test-logo.png'\n  })\n\n  ramp.on('*', event => console.log(event)).show()\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}